package tileconv_test

import (
	"testing"

	"github.com/edorfaus/tileconv"
)

func TestPackedSize(t *testing.T) {
	check := func(bd tileconv.BitDepth, want int) {
		t.Helper()
		c := tileconv.Packed{BitDepth: bd}
		got := c.Size()
		if got != want {
			t.Errorf("depth %v size: want %v, got %v", bd, want, got)
		}
	}
	check(tileconv.BD1, 8*1)
	check(tileconv.BD2, 8*2)
	check(tileconv.BD3, 8*3)
	check(tileconv.BD4, 8*4)
	check(tileconv.BD5, 8*5)
	check(tileconv.BD6, 8*6)
	check(tileconv.BD7, 8*7)
	check(tileconv.BD8, 8*8)
}

func TestPackedEncode(t *testing.T) {
	// This table was generated by reformatting the result of calling
	// math/rand.New(rand.NewSource(0)).Read(buf) on a 8*8-long slice.
	srcPix := [][]uint8{
		{0x01, 0x94, 0xFD, 0xC2, 0xFA, 0x2F, 0xFC, 0xC0},
		{0x41, 0xD3, 0xFF, 0x12, 0x04, 0x5B, 0x73, 0xC8},
		{0x6E, 0x4F, 0xF9, 0x5F, 0xF6, 0x62, 0xA5, 0xEE},
		{0xE8, 0x2A, 0xBD, 0xF4, 0x4A, 0x2D, 0x0B, 0x75},
		{0xFB, 0x18, 0x0D, 0xAF, 0x48, 0xA7, 0x9E, 0xE0},
		{0xB1, 0x0D, 0x39, 0x46, 0x51, 0x85, 0x0F, 0xD4},
		{0xA1, 0x78, 0x89, 0x2E, 0xE2, 0x85, 0xEC, 0xE1},
		{0x51, 0x14, 0x55, 0x78, 0x08, 0x75, 0xD6, 0x4E},
	}

	runCodecEncodeTests(
		t, "BD1", tileconv.Packed{BitDepth: tileconv.BD1},
		srcPix, []byte{
			0b10100100,
			0b11100110,
			0b01110010,
			0b00100111,
			0b10110100,
			0b11101110,
			0b10100101,
			0b10100100,
		},
	)

	runCodecEncodeTests(
		t, "BD2", tileconv.Packed{BitDepth: tileconv.BD2},
		srcPix, []byte{
			0b01_00_01_10, 0b10_11_00_00,
			0b01_11_11_10, 0b00_11_11_00,
			0b10_11_01_11, 0b10_10_01_10,
			0b00_10_01_00, 0b10_01_11_01,
			0b11_00_01_11, 0b00_11_10_00,
			0b01_01_01_10, 0b01_01_11_00,
			0b01_00_01_10, 0b10_01_00_01,
			0b01_00_01_00, 0b00_01_10_10,
		},
	)

	runCodecEncodeTests(
		t, "BD3", tileconv.Packed{BitDepth: tileconv.BD3},
		srcPix, []byte{
			0b001_100_10, 0b1_010_010_1, 0b11_100_000,
			0b001_011_11, 0b1_010_100_0, 0b11_011_000,
			0b110_111_00, 0b1_111_110_0, 0b10_101_110,
			0b000_010_10, 0b1_100_010_1, 0b01_011_101,
			0b011_000_10, 0b1_111_000_1, 0b11_110_000,
			0b001_101_00, 0b1_110_001_1, 0b01_111_100,
			0b001_000_00, 0b1_110_010_1, 0b01_100_001,
			0b001_100_10, 0b1_000_000_1, 0b01_110_110,
		},
	)

	runCodecEncodeTests(
		t, "BD4", tileconv.Packed{BitDepth: tileconv.BD4},
		srcPix, []byte{
			0x14, 0xD2, 0xAF, 0xC0,
			0x13, 0xF2, 0x4B, 0x38,
			0xEF, 0x9F, 0x62, 0x5E,
			0x8A, 0xD4, 0xAD, 0xB5,
			0xB8, 0xDF, 0x87, 0xE0,
			0x1D, 0x96, 0x15, 0xF4,
			0x18, 0x9E, 0x25, 0xC1,
			0x14, 0x58, 0x85, 0x6E,
		},
	)

	runCodecEncodeTests(
		t, "BD5", tileconv.Packed{BitDepth: tileconv.BD5},
		srcPix, []byte{
			0b00001_101, 0b00_11101_0, 0b0010_1101, 0b0_01111_11,
			/**/ 0b100_00000,
			0b00001_100, 0b11_11111_1, 0b0010_0010, 0b0_11011_10,
			/**/ 0b011_01000,
			0b01110_011, 0b11_11001_1, 0b1111_1011, 0b0_00010_00,
			/**/ 0b101_01110,
			0b01000_010, 0b10_11101_1, 0b0100_0101, 0b0_01101_01,
			/**/ 0b011_10101,
			0b11011_110, 0b00_01101_0, 0b1111_0100, 0b0_00111_11,
			/**/ 0b110_00000,
			0b10001_011, 0b01_11001_0, 0b0110_1000, 0b1_00101_01,
			/**/ 0b111_10100,
			0b00001_110, 0b00_01001_0, 0b1110_0001, 0b0_00101_01,
			/**/ 0b100_00001,
			0b10001_101, 0b00_10101_1, 0b1000_0100, 0b0_10101_10,
			/**/ 0b110_01110,
		},
	)

	runCodecEncodeTests(
		t, "BD6", tileconv.Packed{BitDepth: tileconv.BD6},
		srcPix, []byte{
			0b000001_01, 0b0100_1111, 0b01_000010, 0b111010_10,
			/**/ 0b1111_1111, 0b00_000000,
			0b000001_01, 0b0011_1111, 0b11_010010, 0b000100_01,
			/**/ 0b1011_1100, 0b11_001000,
			0b101110_00, 0b1111_1110, 0b01_011111, 0b110110_10,
			/**/ 0b0010_1001, 0b01_101110,
			0b101000_10, 0b1010_1111, 0b01_110100, 0b001010_10,
			/**/ 0b1101_0010, 0b11_110101,
			0b111011_01, 0b1000_0011, 0b01_101111, 0b001000_10,
			/**/ 0b0111_0111, 0b10_100000,
			0b110001_00, 0b1101_1110, 0b01_000110, 0b010001_00,
			/**/ 0b0101_0011, 0b11_010100,
			0b100001_11, 0b1000_0010, 0b01_101110, 0b100010_00,
			/**/ 0b0101_1011, 0b00_100001,
			0b010001_01, 0b0100_0101, 0b01_111000, 0b001000_11,
			/**/ 0b0101_0101, 0b10_001110,
		},
	)

	runCodecEncodeTests(
		t, "BD7", tileconv.Packed{BitDepth: tileconv.BD7},
		srcPix, []byte{
			0b0000001_0, 0b010100_11, 0b11101_100, 0b0010_1111,
			/**/ 0b010_01011, 0b11_111110, 0b0_1000000,
			0b1000001_1, 0b010011_11, 0b11111_001, 0b0010_0000,
			/**/ 0b100_10110, 0b11_111001, 0b1_1001000,
			0b1101110_1, 0b001111_11, 0b11001_101, 0b1111_1110,
			/**/ 0b110_11000, 0b10_010010, 0b1_1101110,
			0b1101000_0, 0b101010_01, 0b11101_111, 0b0100_1001,
			/**/ 0b010_01011, 0b01_000101, 0b1_1110101,
			0b1111011_0, 0b011000_00, 0b01101_010, 0b1111_1001,
			/**/ 0b000_01001, 0b11_001111, 0b0_1100000,
			0b0110001_0, 0b001101_01, 0b11001_100, 0b0110_1010,
			/**/ 0b001_00001, 0b01_000111, 0b1_1010100,
			0b0100001_1, 0b111000_00, 0b01001_010, 0b1110_1100,
			/**/ 0b010_00001, 0b01_110110, 0b0_1100001,
			0b1010001_0, 0b010100_10, 0b10101_111, 0b1000_0001,
			/**/ 0b000_11101, 0b01_101011, 0b0_1001110,
		},
	)

	runCodecEncodeTests(
		t, "BD8", tileconv.Packed{BitDepth: tileconv.BD8},
		srcPix, []byte{
			0x01, 0x94, 0xFD, 0xC2, 0xFA, 0x2F, 0xFC, 0xC0,
			0x41, 0xD3, 0xFF, 0x12, 0x04, 0x5B, 0x73, 0xC8,
			0x6E, 0x4F, 0xF9, 0x5F, 0xF6, 0x62, 0xA5, 0xEE,
			0xE8, 0x2A, 0xBD, 0xF4, 0x4A, 0x2D, 0x0B, 0x75,
			0xFB, 0x18, 0x0D, 0xAF, 0x48, 0xA7, 0x9E, 0xE0,
			0xB1, 0x0D, 0x39, 0x46, 0x51, 0x85, 0x0F, 0xD4,
			0xA1, 0x78, 0x89, 0x2E, 0xE2, 0x85, 0xEC, 0xE1,
			0x51, 0x14, 0x55, 0x78, 0x08, 0x75, 0xD6, 0x4E,
		},
	)
}

func TestPackedDecode(t *testing.T) {
	// This uses the same pixel data as for the Encode test above.
	wantPix := [][]uint8{
		{0x01, 0x94, 0xFD, 0xC2, 0xFA, 0x2F, 0xFC, 0xC0},
		{0x41, 0xD3, 0xFF, 0x12, 0x04, 0x5B, 0x73, 0xC8},
		{0x6E, 0x4F, 0xF9, 0x5F, 0xF6, 0x62, 0xA5, 0xEE},
		{0xE8, 0x2A, 0xBD, 0xF4, 0x4A, 0x2D, 0x0B, 0x75},
		{0xFB, 0x18, 0x0D, 0xAF, 0x48, 0xA7, 0x9E, 0xE0},
		{0xB1, 0x0D, 0x39, 0x46, 0x51, 0x85, 0x0F, 0xD4},
		{0xA1, 0x78, 0x89, 0x2E, 0xE2, 0x85, 0xEC, 0xE1},
		{0x51, 0x14, 0x55, 0x78, 0x08, 0x75, 0xD6, 0x4E},
	}

	runCodecDecodeTests(
		t, "BD1", tileconv.Packed{BitDepth: tileconv.BD1},
		[]byte{
			0b10100100,
			0b11100110,
			0b01110010,
			0b00100111,
			0b10110100,
			0b11101110,
			0b10100101,
			0b10100100,
		},
		pixBits(1, wantPix),
	)

	runCodecDecodeTests(
		t, "BD2", tileconv.Packed{BitDepth: tileconv.BD2},
		[]byte{
			0b01_00_01_10, 0b10_11_00_00,
			0b01_11_11_10, 0b00_11_11_00,
			0b10_11_01_11, 0b10_10_01_10,
			0b00_10_01_00, 0b10_01_11_01,
			0b11_00_01_11, 0b00_11_10_00,
			0b01_01_01_10, 0b01_01_11_00,
			0b01_00_01_10, 0b10_01_00_01,
			0b01_00_01_00, 0b00_01_10_10,
		},
		pixBits(2, wantPix),
	)

	runCodecDecodeTests(
		t, "BD3", tileconv.Packed{BitDepth: tileconv.BD3},
		[]byte{
			0b001_100_10, 0b1_010_010_1, 0b11_100_000,
			0b001_011_11, 0b1_010_100_0, 0b11_011_000,
			0b110_111_00, 0b1_111_110_0, 0b10_101_110,
			0b000_010_10, 0b1_100_010_1, 0b01_011_101,
			0b011_000_10, 0b1_111_000_1, 0b11_110_000,
			0b001_101_00, 0b1_110_001_1, 0b01_111_100,
			0b001_000_00, 0b1_110_010_1, 0b01_100_001,
			0b001_100_10, 0b1_000_000_1, 0b01_110_110,
		},
		pixBits(3, wantPix),
	)

	runCodecDecodeTests(
		t, "BD4", tileconv.Packed{BitDepth: tileconv.BD4},
		[]byte{
			0x14, 0xD2, 0xAF, 0xC0,
			0x13, 0xF2, 0x4B, 0x38,
			0xEF, 0x9F, 0x62, 0x5E,
			0x8A, 0xD4, 0xAD, 0xB5,
			0xB8, 0xDF, 0x87, 0xE0,
			0x1D, 0x96, 0x15, 0xF4,
			0x18, 0x9E, 0x25, 0xC1,
			0x14, 0x58, 0x85, 0x6E,
		},
		pixBits(4, wantPix),
	)

	runCodecDecodeTests(
		t, "BD5", tileconv.Packed{BitDepth: tileconv.BD5},
		[]byte{
			0b00001_101, 0b00_11101_0, 0b0010_1101, 0b0_01111_11,
			/**/ 0b100_00000,
			0b00001_100, 0b11_11111_1, 0b0010_0010, 0b0_11011_10,
			/**/ 0b011_01000,
			0b01110_011, 0b11_11001_1, 0b1111_1011, 0b0_00010_00,
			/**/ 0b101_01110,
			0b01000_010, 0b10_11101_1, 0b0100_0101, 0b0_01101_01,
			/**/ 0b011_10101,
			0b11011_110, 0b00_01101_0, 0b1111_0100, 0b0_00111_11,
			/**/ 0b110_00000,
			0b10001_011, 0b01_11001_0, 0b0110_1000, 0b1_00101_01,
			/**/ 0b111_10100,
			0b00001_110, 0b00_01001_0, 0b1110_0001, 0b0_00101_01,
			/**/ 0b100_00001,
			0b10001_101, 0b00_10101_1, 0b1000_0100, 0b0_10101_10,
			/**/ 0b110_01110,
		},
		pixBits(5, wantPix),
	)

	runCodecDecodeTests(
		t, "BD6", tileconv.Packed{BitDepth: tileconv.BD6},
		[]byte{
			0b000001_01, 0b0100_1111, 0b01_000010, 0b111010_10,
			/**/ 0b1111_1111, 0b00_000000,
			0b000001_01, 0b0011_1111, 0b11_010010, 0b000100_01,
			/**/ 0b1011_1100, 0b11_001000,
			0b101110_00, 0b1111_1110, 0b01_011111, 0b110110_10,
			/**/ 0b0010_1001, 0b01_101110,
			0b101000_10, 0b1010_1111, 0b01_110100, 0b001010_10,
			/**/ 0b1101_0010, 0b11_110101,
			0b111011_01, 0b1000_0011, 0b01_101111, 0b001000_10,
			/**/ 0b0111_0111, 0b10_100000,
			0b110001_00, 0b1101_1110, 0b01_000110, 0b010001_00,
			/**/ 0b0101_0011, 0b11_010100,
			0b100001_11, 0b1000_0010, 0b01_101110, 0b100010_00,
			/**/ 0b0101_1011, 0b00_100001,
			0b010001_01, 0b0100_0101, 0b01_111000, 0b001000_11,
			/**/ 0b0101_0101, 0b10_001110,
		},
		pixBits(6, wantPix),
	)

	runCodecDecodeTests(
		t, "BD7", tileconv.Packed{BitDepth: tileconv.BD7},
		[]byte{
			0b0000001_0, 0b010100_11, 0b11101_100, 0b0010_1111,
			/**/ 0b010_01011, 0b11_111110, 0b0_1000000,
			0b1000001_1, 0b010011_11, 0b11111_001, 0b0010_0000,
			/**/ 0b100_10110, 0b11_111001, 0b1_1001000,
			0b1101110_1, 0b001111_11, 0b11001_101, 0b1111_1110,
			/**/ 0b110_11000, 0b10_010010, 0b1_1101110,
			0b1101000_0, 0b101010_01, 0b11101_111, 0b0100_1001,
			/**/ 0b010_01011, 0b01_000101, 0b1_1110101,
			0b1111011_0, 0b011000_00, 0b01101_010, 0b1111_1001,
			/**/ 0b000_01001, 0b11_001111, 0b0_1100000,
			0b0110001_0, 0b001101_01, 0b11001_100, 0b0110_1010,
			/**/ 0b001_00001, 0b01_000111, 0b1_1010100,
			0b0100001_1, 0b111000_00, 0b01001_010, 0b1110_1100,
			/**/ 0b010_00001, 0b01_110110, 0b0_1100001,
			0b1010001_0, 0b010100_10, 0b10101_111, 0b1000_0001,
			/**/ 0b000_11101, 0b01_101011, 0b0_1001110,
		},
		pixBits(7, wantPix),
	)

	runCodecDecodeTests(
		t, "BD8", tileconv.Packed{BitDepth: tileconv.BD8},
		[]byte{
			0x01, 0x94, 0xFD, 0xC2, 0xFA, 0x2F, 0xFC, 0xC0,
			0x41, 0xD3, 0xFF, 0x12, 0x04, 0x5B, 0x73, 0xC8,
			0x6E, 0x4F, 0xF9, 0x5F, 0xF6, 0x62, 0xA5, 0xEE,
			0xE8, 0x2A, 0xBD, 0xF4, 0x4A, 0x2D, 0x0B, 0x75,
			0xFB, 0x18, 0x0D, 0xAF, 0x48, 0xA7, 0x9E, 0xE0,
			0xB1, 0x0D, 0x39, 0x46, 0x51, 0x85, 0x0F, 0xD4,
			0xA1, 0x78, 0x89, 0x2E, 0xE2, 0x85, 0xEC, 0xE1,
			0x51, 0x14, 0x55, 0x78, 0x08, 0x75, 0xD6, 0x4E,
		},
		wantPix,
	)
}
