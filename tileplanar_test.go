package tileconv_test

import (
	"testing"

	"github.com/edorfaus/tileconv"
)

func TestTilePlanarSize(t *testing.T) {
	check := func(bd tileconv.BitDepth, want int) {
		t.Helper()
		tp := tileconv.TilePlanar{BitDepth: bd}
		got := tp.Size()
		if got != want {
			t.Errorf("depth %v size: want %v, got %v", bd, want, got)
		}
	}
	check(tileconv.BD1, 8*1)
	check(tileconv.BD2, 8*2)
	check(tileconv.BD3, 8*3)
	check(tileconv.BD4, 8*4)
	check(tileconv.BD5, 8*5)
	check(tileconv.BD6, 8*6)
	check(tileconv.BD7, 8*7)
	check(tileconv.BD8, 8*8)
}

func TestTilePlanarEncode(t *testing.T) {
	// This table was generated by reformatting the result of calling
	// math/rand.New(rand.NewSource(0)).Read(buf) on a 8*8-long slice.
	srcPix := [][]uint8{
		{0x01, 0x94, 0xFD, 0xC2, 0xFA, 0x2F, 0xFC, 0xC0},
		{0x41, 0xD3, 0xFF, 0x12, 0x04, 0x5B, 0x73, 0xC8},
		{0x6E, 0x4F, 0xF9, 0x5F, 0xF6, 0x62, 0xA5, 0xEE},
		{0xE8, 0x2A, 0xBD, 0xF4, 0x4A, 0x2D, 0x0B, 0x75},
		{0xFB, 0x18, 0x0D, 0xAF, 0x48, 0xA7, 0x9E, 0xE0},
		{0xB1, 0x0D, 0x39, 0x46, 0x51, 0x85, 0x0F, 0xD4},
		{0xA1, 0x78, 0x89, 0x2E, 0xE2, 0x85, 0xEC, 0xE1},
		{0x51, 0x14, 0x55, 0x78, 0x08, 0x75, 0xD6, 0x4E},
	}

	// Since this codec adds planes by appending more data, we can avoid
	// repeating the data for each bit depth by slicing into this slice.
	const planeSize = 8
	planes := []byte{
		// plane 0
		0b10100100, 0b11100110, 0b01110010, 0b00100111,
		0b10110100, 0b11101110, 0b10100101, 0b10100100,
		// plane 1
		0b00011100, 0b01110110, 0b11011101, 0b01001010,
		0b10010110, 0b00010010, 0b00011000, 0b00000011,
		// plane 2
		0b01100110, 0b00101000, 0b11011011, 0b00110101,
		0b00110110, 0b01010111, 0b00010110, 0b01100111,
		// plane 3
		0b00101110, 0b00100101, 0b11110001, 0b11101110,
		0b11111010, 0b01100010, 0b01110010, 0b00011001,
		// plane 4
		0b01101010, 0b01110110, 0b00111000, 0b00110001,
		0b11000010, 0b10101001, 0b01000000, 0b11110110,
		// plane 5
		0b00101110, 0b00100010, 0b10101111, 0b11110101,
		0b10010101, 0b10100000, 0b11011011, 0b00010100,
		// plane 6
		0b00111011, 0b11100111, 0b11111101, 0b10011001,
		0b10001001, 0b00011001, 0b01001011, 0b10110111,
		// plane 7
		0b01111011, 0b01100001, 0b00101011, 0b10110000,
		0b10010111, 0b10000101, 0b10101111, 0b00000010,
	}

	runCodecEncodeTests(
		t, "BD1", tileconv.TilePlanar{BitDepth: tileconv.BD1},
		srcPix, planes[:planeSize*1],
	)

	runCodecEncodeTests(
		t, "BD2", tileconv.TilePlanar{BitDepth: tileconv.BD2},
		srcPix, planes[:planeSize*2],
	)

	runCodecEncodeTests(
		t, "BD3", tileconv.TilePlanar{BitDepth: tileconv.BD3},
		srcPix, planes[:planeSize*3],
	)

	runCodecEncodeTests(
		t, "BD4", tileconv.TilePlanar{BitDepth: tileconv.BD4},
		srcPix, planes[:planeSize*4],
	)

	runCodecEncodeTests(
		t, "BD5", tileconv.TilePlanar{BitDepth: tileconv.BD5},
		srcPix, planes[:planeSize*5],
	)

	runCodecEncodeTests(
		t, "BD6", tileconv.TilePlanar{BitDepth: tileconv.BD6},
		srcPix, planes[:planeSize*6],
	)

	runCodecEncodeTests(
		t, "BD7", tileconv.TilePlanar{BitDepth: tileconv.BD7},
		srcPix, planes[:planeSize*7],
	)

	runCodecEncodeTests(
		t, "BD8", tileconv.TilePlanar{BitDepth: tileconv.BD8},
		srcPix, planes[:planeSize*8],
	)
}

func TestTilePlanarDecode(t *testing.T) {
	// Since this codec adds planes by appending more data, we can avoid
	// repeating the data for each bit depth by slicing into this slice.
	const planeSize = 8
	planes := []byte{
		// plane 0
		0b10100100, 0b11100110, 0b01110010, 0b00100111,
		0b10110100, 0b11101110, 0b10100101, 0b10100100,
		// plane 1
		0b00011100, 0b01110110, 0b11011101, 0b01001010,
		0b10010110, 0b00010010, 0b00011000, 0b00000011,
		// plane 2
		0b01100110, 0b00101000, 0b11011011, 0b00110101,
		0b00110110, 0b01010111, 0b00010110, 0b01100111,
		// plane 3
		0b00101110, 0b00100101, 0b11110001, 0b11101110,
		0b11111010, 0b01100010, 0b01110010, 0b00011001,
		// plane 4
		0b01101010, 0b01110110, 0b00111000, 0b00110001,
		0b11000010, 0b10101001, 0b01000000, 0b11110110,
		// plane 5
		0b00101110, 0b00100010, 0b10101111, 0b11110101,
		0b10010101, 0b10100000, 0b11011011, 0b00010100,
		// plane 6
		0b00111011, 0b11100111, 0b11111101, 0b10011001,
		0b10001001, 0b00011001, 0b01001011, 0b10110111,
		// plane 7
		0b01111011, 0b01100001, 0b00101011, 0b10110000,
		0b10010111, 0b10000101, 0b10101111, 0b00000010,
	}

	// This uses the same pixel data as for the Encode test above.
	wantPix := [][]uint8{
		{0x01, 0x94, 0xFD, 0xC2, 0xFA, 0x2F, 0xFC, 0xC0},
		{0x41, 0xD3, 0xFF, 0x12, 0x04, 0x5B, 0x73, 0xC8},
		{0x6E, 0x4F, 0xF9, 0x5F, 0xF6, 0x62, 0xA5, 0xEE},
		{0xE8, 0x2A, 0xBD, 0xF4, 0x4A, 0x2D, 0x0B, 0x75},
		{0xFB, 0x18, 0x0D, 0xAF, 0x48, 0xA7, 0x9E, 0xE0},
		{0xB1, 0x0D, 0x39, 0x46, 0x51, 0x85, 0x0F, 0xD4},
		{0xA1, 0x78, 0x89, 0x2E, 0xE2, 0x85, 0xEC, 0xE1},
		{0x51, 0x14, 0x55, 0x78, 0x08, 0x75, 0xD6, 0x4E},
	}

	runCodecDecodeTests(
		t, "BD1", tileconv.TilePlanar{BitDepth: tileconv.BD1},
		planes[:planeSize*1], pixBits(1, wantPix),
	)

	runCodecDecodeTests(
		t, "BD2", tileconv.TilePlanar{BitDepth: tileconv.BD2},
		planes[:planeSize*2], pixBits(2, wantPix),
	)

	runCodecDecodeTests(
		t, "BD3", tileconv.TilePlanar{BitDepth: tileconv.BD3},
		planes[:planeSize*3], pixBits(3, wantPix),
	)

	runCodecDecodeTests(
		t, "BD4", tileconv.TilePlanar{BitDepth: tileconv.BD4},
		planes[:planeSize*4], pixBits(4, wantPix),
	)

	runCodecDecodeTests(
		t, "BD5", tileconv.TilePlanar{BitDepth: tileconv.BD5},
		planes[:planeSize*5], pixBits(5, wantPix),
	)

	runCodecDecodeTests(
		t, "BD6", tileconv.TilePlanar{BitDepth: tileconv.BD6},
		planes[:planeSize*6], pixBits(6, wantPix),
	)

	runCodecDecodeTests(
		t, "BD7", tileconv.TilePlanar{BitDepth: tileconv.BD7},
		planes[:planeSize*7], pixBits(7, wantPix),
	)

	runCodecDecodeTests(
		t, "BD8", tileconv.TilePlanar{BitDepth: tileconv.BD8},
		planes[:planeSize*8], wantPix,
	)
}
